{"version":3,"sources":["Marker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["widthRegex","RegExp","Marker","address","caseId","caseStatus","isActive","lat","lng","onClick","onClose","useState","data","setData","fetchData","a","fetch","response","json","className","event","stopPropagation","dangerouslySetInnerHTML","__html","replace","center","buildQuery","status","date","query","toISOString","substring","firstDate","Date","App","displayFilters","setDisplayFilters","currentMarker","setCurrentMarker","getFullYear","getMonth","getDate","formData","setFormData","useQuery","isFetching","refetch","style","height","width","type","color","onSubmit","e","preventDefault","htmlFor","id","value","onChange","formDataDup","Object","assign","currentTarget","name","options","clickableIcons","draggableCursor","bootstrapURLKeys","key","defaultCenter","defaultZoom","features","map","feature","properties","street_address","case_id","geometry","coordinates","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.840a087f.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface Props {\n  address: string\n  caseId?: string\n  caseStatus?: string\n  isActive?: boolean,\n  lat: number\n  lng: number\n  onClick: () => unknown\n  onClose: () => unknown\n}\n\nconst widthRegex = new RegExp(/width:\\s\\d*px;/g);\n\nexport const Marker = ({ address, caseId, caseStatus, isActive = false, lat, lng, onClick = () => {}, onClose = () => {} }: Props) => {\n  const [data, setData] = useState(\"\");\n\n  const fetchData = async () => {\n    const response = await fetch(`https://kc-covid-violations-api.herokuapp.com/api/${caseId}`);\n    const json = await response.json();\n    return json.data as string;\n  }\n\n  return (\n    <div \n      onClick={async () => { \n        onClick();\n        if(!data) {\n          setData(await fetchData());\n        } \n      }} className={`Marker ${isActive ? 'Active' : ''} ${caseStatus === 'RESOL' ? 'Resolved' : '' }`} {...{lat,lng}}>\n        {isActive && <div className=\"Marker-Text\" >\n          <h1 className=\"Marker-Address\">Address <span className=\"Marker-Close\" onClick={(event) => {event.stopPropagation(); onClose()}}>X</span></h1>\n          <p>{address}</p>\n          {!data && <p>Fetching Data...</p>}\n          <div dangerouslySetInnerHTML={{__html: data.replace(widthRegex, '') }} />\n        </div>}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport GoogleMapReact from 'google-map-react';\nimport './App.css';\nimport { FeatureCollection, Point } from \"geojson\";\nimport { Marker } from \"./Marker\";\nimport Loader from 'react-loader-spinner';\n\nconst center = {\n lat: 39.093349,\n  lng: -94.580345,\n};\n\ntype StatusChoices = 'ALL' | 'OPEN' | 'RESOL'\ninterface QueryParams {\n  status: StatusChoices\n  date: Date\n}\n\nconst buildQuery = ({status, date}: QueryParams) => {\n  let query = `creation_date > '${date.toISOString().substring(0,19)}'`\n\n  if (status !== 'ALL') {\n    query += ` AND status='${status}'`\n  }\n\n  return query;\n};\n\nconst formatDate = (date: Date) => (date.toISOString().substring(0,10));\n\nconst firstDate = new Date();\n\nconst App = () => {\n    const [displayFilters, setDisplayFilters] = useState(true);\n    const [currentMarker, setCurrentMarker] = useState<string>(\"\");\n    const [formData, setFormData] = useState<QueryParams>({status: 'OPEN', date: new Date(\n      firstDate.getFullYear(),\n      firstDate.getMonth() - 1,\n      firstDate.getDate(),\n    )});\n  \n    const { isFetching, data, refetch } = useQuery<FeatureCollection, 'violations'>('violations', async function() {\n      const response = await fetch(`https://data.kcmo.org/resource/ti6s-47nz.geojson?$where=${buildQuery(formData)}`);\n      const data = await response.json();\n      return data;\n    });\n\n    return (\n      <div style={{ height: '100vh', width: '100%' }}>\n        <div className=\"Navigation\">\n          <h1 className=\"Navigation-Header\">KCMO Covid Violations</h1>\n          <hr className=\"Navigation-Divider\"/>\n          <p onClick={() => setDisplayFilters(!displayFilters)} className=\"Trigger-Filters\">{`${displayFilters ? 'Hide Filters' : 'Display Filters'}`}</p>\n          {isFetching && <div className=\"Loading-Container\">\n            <Loader type=\"Puff\" color=\"#666\" height={25} width={25} />\n          </div>}\n          {!isFetching && (\n            <form className=\"Query-Form\" onSubmit={(e) => {\n              e.preventDefault(); \n              refetch();\n            }}>\n            <div className={`Input-Elements ${displayFilters ? '' : 'Hide'}`}>\n              <div className=\"Input-Group\">\n                <label htmlFor=\"status\">Case Status:</label>\n                <select id=\"status\" value={formData.status} onChange={(e) => {\n                  const formDataDup:QueryParams = Object.assign({}, formData);\n                  formDataDup.status = e.currentTarget.value as StatusChoices;\n                  setFormData(formDataDup);\n                }}>\n                  <option value='ALL'>All</option>\n                  <option value='OPEN'>Open</option>\n                  <option value='RESOL'>Resolved</option>\n                </select>\n              </div>\n              <div className=\"Input-Group\">\n                <label htmlFor=\"date\">Start Date:</label>\n                <input name=\"date\" type=\"date\" value={formatDate(formData.date)} onChange={(e) => {\n                  const formDataDup:QueryParams = Object.assign({}, formData);\n                  formDataDup.date = new Date(e.currentTarget.value);;\n                  setFormData(formDataDup);\n                }} />\n              </div>\n              <div className=\"Input-Group\">\n                <input type=\"submit\" value=\"Search\" />\n              </div>\n            </div>\n            <div className=\"Legend\">\n            <span>Open</span>\n            <span className=\"Marker-Legend\" />\n            <span className=\"form-spacer-1\" />\n            <span>Resolved</span>\n            <span className=\"Marker-Legend Resolved\" />\n            </div>\n          </form>)}\n        </div>\n        \n        <GoogleMapReact\n          options={{\n            clickableIcons: false,\n            draggableCursor: 'default',\n          }}\n          bootstrapURLKeys={{ key: 'AIzaSyBSRItjUte9j61pdvxwwVHKeY72fbACnZY' }}\n          defaultCenter={center}\n          defaultZoom={14}\n        >\n          {!isFetching && data?.features.map(feature => <Marker\n              address={feature?.properties?.street_address}\n              caseId={feature?.properties?.case_id}\n              caseStatus={feature?.properties?.status}\n              onClick={() => {\n                setCurrentMarker(feature?.properties?.case_id || \"\");\n              }}\n              onClose={() => {\n                setCurrentMarker(\"\");\n              }}\n              isActive={currentMarker === feature?.properties?.case_id}\n              lat={(feature.geometry as Point).coordinates[1]}\n              lng={(feature.geometry as Point).coordinates[0]}\n              />)}   \n        </GoogleMapReact>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}